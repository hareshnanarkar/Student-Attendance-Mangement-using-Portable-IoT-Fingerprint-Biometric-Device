/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package student_attendance_admin_application_client;

import EntityPackage.Batch;
import EntityPackage.Course;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.net.Socket;
import java.util.ArrayList;
import javax.swing.BorderFactory;
import javax.swing.DefaultListModel;
import javax.swing.border.EtchedBorder;

/**
 *
 * @author admin
 */
public class BatchGUI extends javax.swing.JPanel {

    /**
     * Creates new form BatchGUI
     */
    ArrayList<Batch> arrBatchList;
    ArrayList<Course> arrCourseList;
    public BatchGUI() {
        initComponents();
        setBorder(BorderFactory.createEtchedBorder(EtchedBorder.RAISED));
        jtxtBatchId.setEditable(false);
        jtxtBatchName.setEditable(false);
        jtxtSemester.setEditable(false);
        jtxtAcademicYear.setEditable(false);
        jtxtBatchYear.setEditable(false);
        jchkIsActive.setEnabled(false);
        jcmbCourse.setEnabled(false);
        jbtnSave.setEnabled(false);
        jbtnDeleteCancel.setEnabled(false);
        loadBatchList();
        loadCourseList();
    }

    public void loadBatchList()
    {
        try
        {
            Thread t=new Thread(new Runnable() {
                @Override
                public void run() {
                    try{
                        
                        Socket sock=new Socket("127.0.0.1",9898);
                        ObjectInputStream inputFromServer=new ObjectInputStream(sock.getInputStream());
                        ObjectOutputStream outputToServer=new ObjectOutputStream(sock.getOutputStream());
                        outputToServer.writeUTF("LOAD_BATCH_LIST_REQUEST");
                        outputToServer.flush();
                        arrBatchList=(ArrayList<Batch>)inputFromServer.readObject();
                        DefaultListModel<String> listModel=new DefaultListModel<>();
                        for(int i=0;i<arrBatchList.size();i++)
                        {
                            listModel.addElement(arrBatchList.get(i).BatchName);
                            System.out.println(arrBatchList.get(i).course.CourseId);
                            System.out.println(arrBatchList.get(i).course.CourseName);
                        }
                        jlistBatch.setModel(listModel);
                    }
                    catch(Exception e)
                    {
                            e.printStackTrace();
                    }
                }
            });
            t.start();
        }
        catch(Exception e)
        {
            e.printStackTrace();
        }
    }
    public void loadCourseList()
    {
        try
        {
            Thread t=new Thread(new Runnable() {
                @Override
                public void run() {
                    try{
                        
                        Socket sock=new Socket("127.0.0.1",9898);
                        ObjectInputStream inputFromServer=new ObjectInputStream(sock.getInputStream());
                        ObjectOutputStream outputToServer=new ObjectOutputStream(sock.getOutputStream());
                        outputToServer.writeUTF("LOAD_COURSE_LIST_REQUEST");
                        outputToServer.flush();
                        arrCourseList=(ArrayList<Course>)inputFromServer.readObject();
                        jcmbCourse.removeAllItems();
                        for(int i=0;i<arrCourseList.size();i++)
                        {
                            jcmbCourse.addItem(arrCourseList.get(i).CourseName);
                        }
                    }
                    catch(Exception e)
                    {
                            e.printStackTrace();
                    }
                }
            });
            t.start();
        }
        catch(Exception e)
        {
            e.printStackTrace();
        }
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel2 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jtxtBatchId = new javax.swing.JTextField();
        jtxtBatchName = new javax.swing.JTextField();
        jtxtSemester = new javax.swing.JTextField();
        jbtnCreate = new javax.swing.JButton();
        jbtnDeleteCancel = new javax.swing.JButton();
        jbtnSave = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();
        jtxtBatchYear = new javax.swing.JTextField();
        jchkIsActive = new javax.swing.JCheckBox();
        jLabel7 = new javax.swing.JLabel();
        jcmbCourse = new javax.swing.JComboBox<>();
        jLabel8 = new javax.swing.JLabel();
        jtxtAcademicYear = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jlistBatch = new javax.swing.JList<>();

        jPanel2.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jLabel2.setText("Details :");

        jLabel3.setText("Batch Id :");

        jLabel4.setText("Batch Name :");

        jLabel5.setText("Semester :");

        jbtnCreate.setText("Create New Batch");
        jbtnCreate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtnCreateActionPerformed(evt);
            }
        });

        jbtnDeleteCancel.setText("Delete");
        jbtnDeleteCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtnDeleteCancelActionPerformed(evt);
            }
        });

        jbtnSave.setText("Save Changes");
        jbtnSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtnSaveActionPerformed(evt);
            }
        });

        jLabel6.setText("Batch Year :");

        jchkIsActive.setText("Mark Batch as Active");

        jLabel7.setText("Course :");

        jLabel8.setText("Academic Year :");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jbtnCreate, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 212, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(jLabel2)
                                .addGroup(jPanel2Layout.createSequentialGroup()
                                    .addGap(26, 26, 26)
                                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(jPanel2Layout.createSequentialGroup()
                                            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                .addComponent(jLabel3)
                                                .addComponent(jLabel4)
                                                .addComponent(jLabel5)
                                                .addComponent(jLabel6)
                                                .addComponent(jLabel8))
                                            .addGap(85, 85, 85)
                                            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                                .addComponent(jchkIsActive)
                                                .addComponent(jtxtAcademicYear, javax.swing.GroupLayout.PREFERRED_SIZE, 156, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addComponent(jtxtBatchId, javax.swing.GroupLayout.PREFERRED_SIZE, 156, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addComponent(jtxtBatchName, javax.swing.GroupLayout.PREFERRED_SIZE, 156, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addComponent(jtxtSemester, javax.swing.GroupLayout.PREFERRED_SIZE, 156, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addComponent(jtxtBatchYear, javax.swing.GroupLayout.PREFERRED_SIZE, 156, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                        .addGroup(jPanel2Layout.createSequentialGroup()
                                            .addComponent(jLabel7)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(jcmbCourse, javax.swing.GroupLayout.PREFERRED_SIZE, 159, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                            .addGap(60, 60, 60)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addGap(53, 53, 53)
                        .addComponent(jbtnSave, javax.swing.GroupLayout.PREFERRED_SIZE, 126, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jbtnDeleteCancel, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 98, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(39, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jbtnCreate, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel2)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel3)
                            .addComponent(jtxtBatchId, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel4)
                            .addComponent(jtxtBatchName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel5)
                            .addComponent(jtxtSemester, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel6)
                            .addComponent(jtxtBatchYear, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel8)
                            .addComponent(jtxtAcademicYear, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addComponent(jchkIsActive)
                        .addGap(18, 18, 18)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGap(6, 6, 6)
                                .addComponent(jLabel7))
                            .addComponent(jcmbCourse, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jbtnSave, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jbtnDeleteCancel, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(19, 19, 19))))
        );

        jLabel1.setText("Add, Remove or Update Batch");

        jlistBatch.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                jlistBatchValueChanged(evt);
            }
        });
        jScrollPane1.setViewportView(jlistBatch);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(31, 31, 31)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 258, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 227, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(71, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addGap(29, 29, 29)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 383, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 39, Short.MAX_VALUE))
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jlistBatchValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_jlistBatchValueChanged
        // TODO add your handling code here:
        if(jlistBatch.getSelectedIndex()!=-1)
        {
            jtxtBatchId.setText(""+ arrBatchList.get(jlistBatch.getSelectedIndex()).BatchId);
            jtxtBatchName.setText(arrBatchList.get(jlistBatch.getSelectedIndex()).BatchName);
            jtxtSemester.setText(""+ arrBatchList.get(jlistBatch.getSelectedIndex()).Semester);
            jtxtAcademicYear.setText(""+ arrBatchList.get(jlistBatch.getSelectedIndex()).AcademicYear);
            jtxtBatchYear.setText(""+ arrBatchList.get(jlistBatch.getSelectedIndex()).BatchYear);
            jchkIsActive.setSelected(arrBatchList.get(jlistBatch.getSelectedIndex()).IsActive);
            System.out.println(arrBatchList.get(jlistBatch.getSelectedIndex()).course.CourseName);
            jcmbCourse.setSelectedItem(arrBatchList.get(jlistBatch.getSelectedIndex()).course.CourseName);
            jtxtBatchId.setEditable(false);
            jtxtBatchName.setEditable(true);
            jtxtSemester.setEditable(true);
            jtxtAcademicYear.setEditable(true);
            jtxtBatchYear.setEditable(true);
            jchkIsActive.setEnabled(true);
            jcmbCourse.setEnabled(true);
            jbtnSave.setEnabled(true);
            jbtnDeleteCancel.setEnabled(true);
            jbtnSave.setText("Save Changes");
            jbtnDeleteCancel.setText("Delete");
        }
    }//GEN-LAST:event_jlistBatchValueChanged

    private void jbtnCreateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtnCreateActionPerformed
        // TODO add your handling code here:
        jlistBatch.clearSelection();
        jtxtBatchId.setText("ID will be auto-generated");
        jtxtBatchName.setText("");
        jtxtSemester.setText("");
        jtxtAcademicYear.setText("");
        jtxtBatchYear.setText("");
        jchkIsActive.setSelected(false);
        jtxtBatchId.setEditable(false);
        jtxtBatchName.setEditable(true);
        jtxtSemester.setEditable(true);
        jtxtAcademicYear.setEditable(true);
        jtxtBatchYear.setEditable(true);
        jchkIsActive.setEnabled(true);
        jcmbCourse.setEnabled(true);
        jbtnSave.setEnabled(true);
        jbtnDeleteCancel.setEnabled(true);
        jbtnSave.setText("Save");
        jbtnDeleteCancel.setText("Cancel");
    }//GEN-LAST:event_jbtnCreateActionPerformed

    private void jbtnDeleteCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtnDeleteCancelActionPerformed
        // TODO add your handling code here:

        if(jbtnDeleteCancel.getText().equals("Delete"))
        {
            try
            {
                Thread t=new Thread(new Runnable() {
                    @Override
                    public void run() {
                        try{

                            Socket sock=new Socket("127.0.0.1",9898);
                            ObjectInputStream inputFromServer=new ObjectInputStream(sock.getInputStream());
                            ObjectOutputStream outputToServer=new ObjectOutputStream(sock.getOutputStream());
                            outputToServer.writeUTF("DELETE_BATCH_REQUEST");

                            outputToServer.writeInt(Integer.parseInt(jtxtBatchId.getText()));
                            outputToServer.flush();
                            String result=inputFromServer.readUTF();
                            System.out.println(result);
                            if(result.equals("DELETE_BATCH_SUCCESSFUL"))
                            {
                                loadBatchList();
                            }
                            else
                            {

                            }
                        }
                        catch(Exception e)
                        {
                            e.printStackTrace();
                        }
                    }
                });
                t.start();
            }
            catch(Exception e)
            {
                e.printStackTrace();
            }
        }
    }//GEN-LAST:event_jbtnDeleteCancelActionPerformed

    private void jbtnSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtnSaveActionPerformed
        // TODO add your handling code here:
        if(jbtnSave.getText().equals("Save Changes"))
        {
            try
            {
                Thread t=new Thread(new Runnable() {
                    @Override
                    public void run() {
                        try{

                            Socket sock=new Socket("127.0.0.1",9898);
                            ObjectInputStream inputFromServer=new ObjectInputStream(sock.getInputStream());
                            ObjectOutputStream outputToServer=new ObjectOutputStream(sock.getOutputStream());
                            outputToServer.writeUTF("UPDATE_BATCH_REQUEST");
                            Batch batch=new Batch();
                            batch.BatchId=Integer.parseInt(jtxtBatchId.getText());
                            batch.BatchName=jtxtBatchName.getText();
                            batch.Semester=Integer.parseInt(jtxtSemester.getText());
                            batch.AcademicYear=Integer.parseInt(jtxtAcademicYear.getText());
                            batch.BatchYear=Integer.parseInt(jtxtBatchYear.getText());
                            batch.IsActive=jchkIsActive.isSelected();
                            batch.course=arrCourseList.get(jcmbCourse.getSelectedIndex());
                            outputToServer.writeObject(batch);
                            outputToServer.flush();
                            String result=inputFromServer.readUTF();
                            System.out.println(result);
                            if(result.equals("UPDATE_BATCH_SUCCESSFUL"))
                            {
                                loadBatchList();
                            }
                            else
                            {

                            }
                        }
                        catch(Exception e)
                        {
                            e.printStackTrace();
                        }
                    }
                });
                t.start();
            }
            catch(Exception e)
            {
                e.printStackTrace();
            }
        }
        else
        {
            try
            {
                Thread t=new Thread(new Runnable() {
                    @Override
                    public void run() {
                        try{

                            Socket sock=new Socket("127.0.0.1",9898);
                            ObjectInputStream inputFromServer=new ObjectInputStream(sock.getInputStream());
                            ObjectOutputStream outputToServer=new ObjectOutputStream(sock.getOutputStream());
                            outputToServer.writeUTF("CREATE_BATCH_REQUEST");
                            Batch batch=new Batch();

                            batch.BatchName=jtxtBatchName.getText();
                            batch.Semester=Integer.parseInt(jtxtSemester.getText());
                            batch.AcademicYear=Integer.parseInt(jtxtAcademicYear.getText());
                            batch.BatchYear=Integer.parseInt(jtxtBatchYear.getText());
                            batch.IsActive=jchkIsActive.isSelected();
                            batch.course=arrCourseList.get(jcmbCourse.getSelectedIndex());
                            outputToServer.writeObject(batch);
                            outputToServer.flush();
                            String result=inputFromServer.readUTF();
                            System.out.println(result);
                            if(result.equals("CREATE_BATCH_SUCCESSFUL"))
                            {
                                batch.BatchId=inputFromServer.readInt();
                                System.out.println(batch.BatchId);
                                loadBatchList();
                                
                            }
                            else
                            {

                            }
                        }
                        catch(Exception e)
                        {
                            e.printStackTrace();
                        }
                    }
                });
                t.start();
            }
            catch(Exception e)
            {
                e.printStackTrace();
            }
        }
    }//GEN-LAST:event_jbtnSaveActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton jbtnCreate;
    private javax.swing.JButton jbtnDeleteCancel;
    private javax.swing.JButton jbtnSave;
    private javax.swing.JCheckBox jchkIsActive;
    private javax.swing.JComboBox<String> jcmbCourse;
    private javax.swing.JList<String> jlistBatch;
    private javax.swing.JTextField jtxtAcademicYear;
    private javax.swing.JTextField jtxtBatchId;
    private javax.swing.JTextField jtxtBatchName;
    private javax.swing.JTextField jtxtBatchYear;
    private javax.swing.JTextField jtxtSemester;
    // End of variables declaration//GEN-END:variables
}
